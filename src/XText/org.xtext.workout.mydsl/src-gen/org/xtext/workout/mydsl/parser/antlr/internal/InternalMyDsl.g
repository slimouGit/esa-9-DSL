/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.workout.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.workout.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.workout.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getWorkoutWorkoutParserRuleCall_0());
			}
			lv_workout_0_0=ruleWorkout
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"workout",
					lv_workout_0_0,
					"org.xtext.workout.mydsl.MyDsl.Workout");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleWorkout
entryRuleWorkout returns [String current=null]:
	{ newCompositeNode(grammarAccess.getWorkoutRule()); }
	iv_ruleWorkout=ruleWorkout
	{ $current=$iv_ruleWorkout.current.getText(); }
	EOF;

// Rule Workout
ruleWorkout returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getWorkoutAccess().getPerformExerciseParserRuleCall());
	}
	this_performExercise_0=ruleperformExercise
	{
		$current.merge(this_performExercise_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleperformExercise
entryRuleperformExercise returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPerformExerciseRule()); }
	iv_ruleperformExercise=ruleperformExercise
	{ $current=$iv_ruleperformExercise.current.getText(); }
	EOF;

// Rule performExercise
ruleperformExercise returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='do'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPerformExerciseAccess().getDoKeyword_0());
		}
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getPerformExerciseAccess().getINTTerminalRuleCall_1());
		}
		{
			newCompositeNode(grammarAccess.getPerformExerciseAccess().getPracticeParserRuleCall_2());
		}
		this_practice_2=rulepractice
		{
			$current.merge(this_practice_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='as'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPerformExerciseAccess().getAsKeyword_3());
		}
		{
			newCompositeNode(grammarAccess.getPerformExerciseAccess().getLevelParserRuleCall_4());
		}
		this_level_4=rulelevel
		{
			$current.merge(this_level_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulelevel
entryRulelevel returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLevelRule()); }
	iv_rulelevel=rulelevel
	{ $current=$iv_rulelevel.current.getText(); }
	EOF;

// Rule level
rulelevel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='beginner'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLevelAccess().getBeginnerKeyword_0());
		}
		    |
		kw='practiced'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLevelAccess().getPracticedKeyword_1());
		}
		    |
		kw='professional'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLevelAccess().getProfessionalKeyword_2());
		}
	)
;

// Entry rule entryRulepractice
entryRulepractice returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPracticeRule()); }
	iv_rulepractice=rulepractice
	{ $current=$iv_rulepractice.current.getText(); }
	EOF;

// Rule practice
rulepractice returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='push-ups'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPracticeAccess().getPushUpsKeyword_0());
		}
		    |
		kw='knee-bends'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPracticeAccess().getKneeBendsKeyword_1());
		}
		    |
		kw='sit-ups'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPracticeAccess().getSitUpsKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
