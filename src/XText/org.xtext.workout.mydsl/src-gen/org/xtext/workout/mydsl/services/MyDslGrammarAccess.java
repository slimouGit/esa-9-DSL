/*
 * generated by Xtext 2.25.0
 */
package org.xtext.workout.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.workout.mydsl.MyDsl.Model");
		private final Assignment cWorkoutAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cWorkoutWorkoutParserRuleCall_0 = (RuleCall)cWorkoutAssignment.eContents().get(0);
		
		//Model:
		//    workout+=Workout*;
		@Override public ParserRule getRule() { return rule; }
		
		//workout+=Workout*
		public Assignment getWorkoutAssignment() { return cWorkoutAssignment; }
		
		//Workout
		public RuleCall getWorkoutWorkoutParserRuleCall_0() { return cWorkoutWorkoutParserRuleCall_0; }
	}
	public class WorkoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.workout.mydsl.MyDsl.Workout");
		private final RuleCall cPerformExerciseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Workout:
		//    performExercise;
		@Override public ParserRule getRule() { return rule; }
		
		//performExercise
		public RuleCall getPerformExerciseParserRuleCall() { return cPerformExerciseParserRuleCall; }
	}
	public class PerformExerciseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.workout.mydsl.MyDsl.performExercise");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPracticeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cLevelParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//performExercise:
		//    'do' INT practice 'as' level;
		@Override public ParserRule getRule() { return rule; }
		
		//'do' INT practice 'as' level
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//practice
		public RuleCall getPracticeParserRuleCall_2() { return cPracticeParserRuleCall_2; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//level
		public RuleCall getLevelParserRuleCall_4() { return cLevelParserRuleCall_4; }
	}
	public class LevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.workout.mydsl.MyDsl.level");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBeginnerKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPracticedKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProfessionalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//level:
		//    'beginner' | 'practiced' | 'professional';
		@Override public ParserRule getRule() { return rule; }
		
		//'beginner' | 'practiced' | 'professional'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'beginner'
		public Keyword getBeginnerKeyword_0() { return cBeginnerKeyword_0; }
		
		//'practiced'
		public Keyword getPracticedKeyword_1() { return cPracticedKeyword_1; }
		
		//'professional'
		public Keyword getProfessionalKeyword_2() { return cProfessionalKeyword_2; }
	}
	public class PracticeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.workout.mydsl.MyDsl.practice");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPushUpsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cKneeBendsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSitUpsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//practice:
		//    'push-ups' | 'knee-bends' | 'sit-ups';
		@Override public ParserRule getRule() { return rule; }
		
		//'push-ups' | 'knee-bends' | 'sit-ups'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'push-ups'
		public Keyword getPushUpsKeyword_0() { return cPushUpsKeyword_0; }
		
		//'knee-bends'
		public Keyword getKneeBendsKeyword_1() { return cKneeBendsKeyword_1; }
		
		//'sit-ups'
		public Keyword getSitUpsKeyword_2() { return cSitUpsKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final WorkoutElements pWorkout;
	private final PerformExerciseElements pPerformExercise;
	private final LevelElements pLevel;
	private final PracticeElements pPractice;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pWorkout = new WorkoutElements();
		this.pPerformExercise = new PerformExerciseElements();
		this.pLevel = new LevelElements();
		this.pPractice = new PracticeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.workout.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    workout+=Workout*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Workout:
	//    performExercise;
	public WorkoutElements getWorkoutAccess() {
		return pWorkout;
	}
	
	public ParserRule getWorkoutRule() {
		return getWorkoutAccess().getRule();
	}
	
	//performExercise:
	//    'do' INT practice 'as' level;
	public PerformExerciseElements getPerformExerciseAccess() {
		return pPerformExercise;
	}
	
	public ParserRule getPerformExerciseRule() {
		return getPerformExerciseAccess().getRule();
	}
	
	//level:
	//    'beginner' | 'practiced' | 'professional';
	public LevelElements getLevelAccess() {
		return pLevel;
	}
	
	public ParserRule getLevelRule() {
		return getLevelAccess().getRule();
	}
	
	//practice:
	//    'push-ups' | 'knee-bends' | 'sit-ups';
	public PracticeElements getPracticeAccess() {
		return pPractice;
	}
	
	public ParserRule getPracticeRule() {
		return getPracticeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
