/*
 * generated by Xtext 2.25.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.workout.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.workout.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.workout.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getWorkoutAssignment()); }
		(rule__Model__WorkoutAssignment)*
		{ after(grammarAccess.getModelAccess().getWorkoutAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWorkout
entryRuleWorkout
:
{ before(grammarAccess.getWorkoutRule()); }
	 ruleWorkout
{ after(grammarAccess.getWorkoutRule()); } 
	 EOF 
;

// Rule Workout
ruleWorkout 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWorkoutAccess().getPerformExerciseParserRuleCall()); }
		ruleperformExercise
		{ after(grammarAccess.getWorkoutAccess().getPerformExerciseParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleperformExercise
entryRuleperformExercise
:
{ before(grammarAccess.getPerformExerciseRule()); }
	 ruleperformExercise
{ after(grammarAccess.getPerformExerciseRule()); } 
	 EOF 
;

// Rule performExercise
ruleperformExercise 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPerformExerciseAccess().getGroup()); }
		(rule__PerformExercise__Group__0)
		{ after(grammarAccess.getPerformExerciseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulelevel
entryRulelevel
:
{ before(grammarAccess.getLevelRule()); }
	 rulelevel
{ after(grammarAccess.getLevelRule()); } 
	 EOF 
;

// Rule level
rulelevel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLevelAccess().getAlternatives()); }
		(rule__Level__Alternatives)
		{ after(grammarAccess.getLevelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulepractice
entryRulepractice
:
{ before(grammarAccess.getPracticeRule()); }
	 rulepractice
{ after(grammarAccess.getPracticeRule()); } 
	 EOF 
;

// Rule practice
rulepractice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPracticeAccess().getAlternatives()); }
		(rule__Practice__Alternatives)
		{ after(grammarAccess.getPracticeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Level__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLevelAccess().getBeginnerKeyword_0()); }
		'beginner'
		{ after(grammarAccess.getLevelAccess().getBeginnerKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getLevelAccess().getPracticedKeyword_1()); }
		'practiced'
		{ after(grammarAccess.getLevelAccess().getPracticedKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getLevelAccess().getProfessionalKeyword_2()); }
		'professional'
		{ after(grammarAccess.getLevelAccess().getProfessionalKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Practice__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPracticeAccess().getPushUpsKeyword_0()); }
		'push-ups'
		{ after(grammarAccess.getPracticeAccess().getPushUpsKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPracticeAccess().getKneeBendsKeyword_1()); }
		'knee-bends'
		{ after(grammarAccess.getPracticeAccess().getKneeBendsKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getPracticeAccess().getSitUpsKeyword_2()); }
		'sit-ups'
		{ after(grammarAccess.getPracticeAccess().getSitUpsKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PerformExercise__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PerformExercise__Group__0__Impl
	rule__PerformExercise__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PerformExercise__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPerformExerciseAccess().getDoKeyword_0()); }
	'do'
	{ after(grammarAccess.getPerformExerciseAccess().getDoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PerformExercise__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PerformExercise__Group__1__Impl
	rule__PerformExercise__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PerformExercise__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPerformExerciseAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getPerformExerciseAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PerformExercise__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PerformExercise__Group__2__Impl
	rule__PerformExercise__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PerformExercise__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPerformExerciseAccess().getPracticeParserRuleCall_2()); }
	rulepractice
	{ after(grammarAccess.getPerformExerciseAccess().getPracticeParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PerformExercise__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PerformExercise__Group__3__Impl
	rule__PerformExercise__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PerformExercise__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPerformExerciseAccess().getAsKeyword_3()); }
	'as'
	{ after(grammarAccess.getPerformExerciseAccess().getAsKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PerformExercise__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PerformExercise__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PerformExercise__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPerformExerciseAccess().getLevelParserRuleCall_4()); }
	rulelevel
	{ after(grammarAccess.getPerformExerciseAccess().getLevelParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__WorkoutAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getWorkoutWorkoutParserRuleCall_0()); }
		ruleWorkout
		{ after(grammarAccess.getModelAccess().getWorkoutWorkoutParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
